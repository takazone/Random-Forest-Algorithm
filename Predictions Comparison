import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split 
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics
import numpy as np

plt.style.use ("bmh")

########Database Import##########

data = pd.read_csv(r"C:\Users\Takazone\Downloads\advertising.csv")


#########Defining variables######


x = data.drop('Vendas', axis = 1)
y = data['Vendas']

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.3, random_state=1)

####AI Train####

lin_reg = LinearRegression()
lin_reg.fit(x_train, y_train)

rf_reg = RandomForestRegressor()
rf_reg.fit(x_train, y_train)

# Creating AI
modelo_regressaolinear = LinearRegression()
modelo_arvoredecisao = RandomForestRegressor()

# Training AI
modelo_regressaolinear.fit(x_train, y_train)
modelo_arvoredecisao.fit(x_train, y_train)

# Doing Predictions
previsao_regressaolinear = modelo_regressaolinear.predict(x_test)
previsao_arvoredecisao = modelo_arvoredecisao.predict(x_test)

# Model Comparing
print(metrics.r2_score(y_test, previsao_regressaolinear))
print(metrics.r2_score(y_test, previsao_arvoredecisao)) 

tabela_auxiliar = pd.DataFrame()
tabela_auxiliar["y_test"] = y_test
tabela_auxiliar["Previsoes ArvoreDecisao"] = previsao_arvoredecisao
tabela_auxiliar["Previsoes Regressao Linear"] = previsao_regressaolinear

plt.figure(figsize=(15,6))
plt.title("Prediction Comparison")
sns.lineplot(data=tabela_auxiliar)
plt.show()

################ANALISE EXPLORATORIA####################### (Optional, just for data visualization before starting the split test)
#sns.pairplot(data) #Scatter plots
#sns.heatmap(data.corr(), cmap = 'PiYG', annot=True) #Heatmap
#plt.show()
